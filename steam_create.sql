create schema if not exists steam;

-- drop schema steam cascade;
-- keepin this just in case

set search_path to steam;

CREATE TABLE user_account
(
    uid          INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username     VARCHAR(32) NOT NULL,
    date_created DATE        NOT NULL,
    games_owned  INTEGER DEFAULT 0 -- due to users not actually needing to have any games
    -- owned to have an account on steam
);

CREATE TABLE library
(
    lid         INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid         INTEGER NOT NULL,
    games       TEXT,
    games_owned INTEGER DEFAULT 0,
    FOREIGN KEY (uid) REFERENCES user_account (uid)
);

CREATE TABLE game -- add plenty of games there, I got names ready for all of that
(
    gid            INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           TEXT    NOT NULL,
    user_played    INTEGER NOT NULL,
    friends_played INTEGER NOT NULL -- I don't know what name to give to this one
);

CREATE TABLE genres
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre    TEXT,
    game_id  INTEGER,
    FOREIGN KEY (game_id) REFERENCES game (gid)
);

CREATE TABLE friends
(
    fid           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username      TEXT NOT NULL,
    friends_with  INTEGER, -- this is for the user_id to be called (with a join)
    friends_since DATE NOT NULL
);

CREATE TABLE store
(
    uid          INTEGER NOT NULL,
    gid          INTEGER NOT NULL,
    name_of_game TEXT    NOT NULL,
    genre_id     INTEGER NOT NULL,
    reviews      TEXT    NOT NULL,
    developer    TEXT    NOT NULL,
    publisher    TEXT    NOT NULL,
    price        DECIMAL(10, 2), -- due to prices being around 100 nowadays with taxes
    PRIMARY KEY (gid, uid),
    FOREIGN KEY (uid) REFERENCES user_account (uid),
    FOREIGN KEY (gid) REFERENCES game (gid)
);

CREATE TABLE profile
(
    uid             INTEGER NOT NULL PRIMARY KEY,
    name            TEXT    NOT NULL,
    friends         INTEGER DEFAULT 0,
    recent_activity TEXT,
    games_owned     INTEGER,
    FOREIGN KEY (uid) REFERENCES user_account (uid)
);

CREATE TABLE login_info
(
    log_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login_name   VARCHAR(32) NOT NULL UNIQUE,
    password     VARCHAR(64) NOT NULL,
    last_entered DATE,
    uid          INTEGER,
    FOREIGN KEY (uid) REFERENCES user_account (uid)
);

CREATE TABLE gift
(
    gift_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid     INTEGER NOT NULL,
    fid     INTEGER NOT NULL,
    FOREIGN KEY (uid) REFERENCES user_account (uid),
    FOREIGN KEY (fid) REFERENCES friends (fid)
);

CREATE TABLE orders
(
    oid        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid        INTEGER        NOT NULL,
    game_name  TEXT           NOT NULL,
    price      DECIMAL(10, 2) NOT NULL,
    gift_id    INTEGER        NOT NULL,
    order_date DATE           NOT NULL,
    FOREIGN KEY (uid) REFERENCES user_account (uid),
    FOREIGN KEY (gift_id) REFERENCES gift (gift_id)
);

CREATE TABLE shared_library
(
    slid INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid  INTEGER NOT NULL,
    lid  INTEGER NOT NULL,
    fid  INTEGER NOT NULL,
    FOREIGN KEY (uid) REFERENCES user_account (uid),
    FOREIGN KEY (lid) REFERENCES library (lid),
    FOREIGN KEY (fid) REFERENCES friends (fid)
);

CREATE TABLE wallet
(
    wallet_id        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid              INTEGER NOT NULL,
    balance          DECIMAL(12, 2) DEFAULT 0.00,
    card_information VARCHAR(100),
    FOREIGN KEY (uid) REFERENCES user_account (uid)
);

CREATE TABLE game_status
(
    status_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uid          INTEGER NOT NULL,
    gid          INTEGER NOT NULL,
    mode_played  TEXT,
    game_party   TEXT,
    FOREIGN KEY (uid) REFERENCES user_account(uid),
    FOREIGN KEY (gid) REFERENCES game(gid)
);